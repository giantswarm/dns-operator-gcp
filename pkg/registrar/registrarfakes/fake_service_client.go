// Code generated by counterfeiter. DO NOT EDIT.
package registrarfakes

import (
	"context"
	"sync"

	"github.com/giantswarm/dns-operator-gcp/pkg/registrar"
	v1 "k8s.io/api/core/v1"
)

type FakeServiceClient struct {
	GetByLabelStub        func(context.Context, string, string) (v1.Service, error)
	getByLabelMutex       sync.RWMutex
	getByLabelArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getByLabelReturns struct {
		result1 v1.Service
		result2 error
	}
	getByLabelReturnsOnCall map[int]struct {
		result1 v1.Service
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceClient) GetByLabel(arg1 context.Context, arg2 string, arg3 string) (v1.Service, error) {
	fake.getByLabelMutex.Lock()
	ret, specificReturn := fake.getByLabelReturnsOnCall[len(fake.getByLabelArgsForCall)]
	fake.getByLabelArgsForCall = append(fake.getByLabelArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetByLabelStub
	fakeReturns := fake.getByLabelReturns
	fake.recordInvocation("GetByLabel", []interface{}{arg1, arg2, arg3})
	fake.getByLabelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceClient) GetByLabelCallCount() int {
	fake.getByLabelMutex.RLock()
	defer fake.getByLabelMutex.RUnlock()
	return len(fake.getByLabelArgsForCall)
}

func (fake *FakeServiceClient) GetByLabelCalls(stub func(context.Context, string, string) (v1.Service, error)) {
	fake.getByLabelMutex.Lock()
	defer fake.getByLabelMutex.Unlock()
	fake.GetByLabelStub = stub
}

func (fake *FakeServiceClient) GetByLabelArgsForCall(i int) (context.Context, string, string) {
	fake.getByLabelMutex.RLock()
	defer fake.getByLabelMutex.RUnlock()
	argsForCall := fake.getByLabelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceClient) GetByLabelReturns(result1 v1.Service, result2 error) {
	fake.getByLabelMutex.Lock()
	defer fake.getByLabelMutex.Unlock()
	fake.GetByLabelStub = nil
	fake.getByLabelReturns = struct {
		result1 v1.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceClient) GetByLabelReturnsOnCall(i int, result1 v1.Service, result2 error) {
	fake.getByLabelMutex.Lock()
	defer fake.getByLabelMutex.Unlock()
	fake.GetByLabelStub = nil
	if fake.getByLabelReturnsOnCall == nil {
		fake.getByLabelReturnsOnCall = make(map[int]struct {
			result1 v1.Service
			result2 error
		})
	}
	fake.getByLabelReturnsOnCall[i] = struct {
		result1 v1.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getByLabelMutex.RLock()
	defer fake.getByLabelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ registrar.ServiceClient = new(FakeServiceClient)

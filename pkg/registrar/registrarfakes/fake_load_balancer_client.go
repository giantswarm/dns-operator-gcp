// Code generated by counterfeiter. DO NOT EDIT.
package registrarfakes

import (
	"context"
	"sync"

	"github.com/giantswarm/dns-operator-gcp/pkg/registrar"
)

type FakeLoadBalancerClient struct {
	GetIPByLabelStub        func(context.Context, string, string) (string, error)
	getIPByLabelMutex       sync.RWMutex
	getIPByLabelArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getIPByLabelReturns struct {
		result1 string
		result2 error
	}
	getIPByLabelReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLoadBalancerClient) GetIPByLabel(arg1 context.Context, arg2 string, arg3 string) (string, error) {
	fake.getIPByLabelMutex.Lock()
	ret, specificReturn := fake.getIPByLabelReturnsOnCall[len(fake.getIPByLabelArgsForCall)]
	fake.getIPByLabelArgsForCall = append(fake.getIPByLabelArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetIPByLabelStub
	fakeReturns := fake.getIPByLabelReturns
	fake.recordInvocation("GetIPByLabel", []interface{}{arg1, arg2, arg3})
	fake.getIPByLabelMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLoadBalancerClient) GetIPByLabelCallCount() int {
	fake.getIPByLabelMutex.RLock()
	defer fake.getIPByLabelMutex.RUnlock()
	return len(fake.getIPByLabelArgsForCall)
}

func (fake *FakeLoadBalancerClient) GetIPByLabelCalls(stub func(context.Context, string, string) (string, error)) {
	fake.getIPByLabelMutex.Lock()
	defer fake.getIPByLabelMutex.Unlock()
	fake.GetIPByLabelStub = stub
}

func (fake *FakeLoadBalancerClient) GetIPByLabelArgsForCall(i int) (context.Context, string, string) {
	fake.getIPByLabelMutex.RLock()
	defer fake.getIPByLabelMutex.RUnlock()
	argsForCall := fake.getIPByLabelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLoadBalancerClient) GetIPByLabelReturns(result1 string, result2 error) {
	fake.getIPByLabelMutex.Lock()
	defer fake.getIPByLabelMutex.Unlock()
	fake.GetIPByLabelStub = nil
	fake.getIPByLabelReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadBalancerClient) GetIPByLabelReturnsOnCall(i int, result1 string, result2 error) {
	fake.getIPByLabelMutex.Lock()
	defer fake.getIPByLabelMutex.Unlock()
	fake.GetIPByLabelStub = nil
	if fake.getIPByLabelReturnsOnCall == nil {
		fake.getIPByLabelReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getIPByLabelReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeLoadBalancerClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getIPByLabelMutex.RLock()
	defer fake.getIPByLabelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLoadBalancerClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ registrar.LoadBalancerClient = new(FakeLoadBalancerClient)
